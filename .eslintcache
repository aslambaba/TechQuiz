[{"J:\\Projects\\Offline\\Projects\\TechQuiz\\src\\index.tsx":"1","J:\\Projects\\Offline\\Projects\\TechQuiz\\src\\App.tsx":"2"},{"size":209,"mtime":1609876235167,"results":"3","hashOfConfig":"4"},{"size":3031,"mtime":1610437767040,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"11jl7h1",{"filePath":"9","messages":"10","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"J:\\Projects\\Offline\\Projects\\TechQuiz\\src\\index.tsx",[],["12","13"],"J:\\Projects\\Offline\\Projects\\TechQuiz\\src\\App.tsx",["14","15"],"import React, { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { ApiQuiz, DevQuiz } from './Types/quizTypes';\r\nimport './style/style.css';\r\nimport tick from './image/tic.png';\r\nimport cross from './image/cross.png';\r\n\r\n\r\nexport default function App() {\r\n  let [counter, setCounter] = useState<number>(-1);\r\n  let [quiz, setQuiz] = useState<DevQuiz[]>([]);\r\n  let [selectedAnswer, SetselectedAnswer] = useState<String>('');\r\n  let [quizPoints, SetquizPoints] = useState<number>(0)\r\n  const suffle = (array: any[]) => {\r\n    return [...array].sort(() => Math.random() - 0.5);\r\n  };\r\n\r\n  useEffect(() => {\r\n    async function getQuizAPI() {\r\n      const api = await fetch('https://opentdb.com/api.php?amount=10&category=18&difficulty=easy&type=multiple');\r\n      const { results } = await api.json();\r\n      const apiData: DevQuiz[] = await results.map((obj: ApiQuiz) => {\r\n\r\n        return {\r\n          question: obj.question,\r\n          correct_answer: obj.correct_answer,\r\n          options: suffle(obj.incorrect_answers.concat(obj.correct_answer)),\r\n        }\r\n      });\r\n\r\n      setQuiz(apiData);\r\n      setCounter(0);\r\n    }\r\n    getQuizAPI();\r\n  }, [])\r\n\r\n  function myFunction() {\r\n    setCounter(counter + 1);\r\n  }\r\n  console.log(counter)\r\n  if (counter === -1) {\r\n    return <h1>Loading...</h1>\r\n  }\r\n  if (counter === 10) {\r\n    if(counter >= 6){\r\n      return (\r\n        <div className='PassQuizPage'>\r\n          <img src={tick} className='tickImage'/>\r\n          <h2>Congratulations You Passed the Quiz</h2>\r\n          <h3>Your Score: {quizPoints} out of 10</h3>\r\n          <a href='/'><button>Give Another Exam</button></a>\r\n        </div>\r\n      )\r\n    }\r\n    else{\r\n      return (\r\n        <div className='PassQuizPage'>\r\n          <img src={cross} className='tickImage'/>\r\n          <h2>Sorry, You are Fail in Quiz</h2>\r\n          <h3>Your Score: {quizPoints} out of 10</h3>\r\n          <a href='/'><button>Try Another Exam</button></a>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n  else {\r\n    let question = quiz[counter];\r\n    if (selectedAnswer.length === 0) {\r\n    }\r\n    else {\r\n      if (selectedAnswer === question.correct_answer) {\r\n        SetquizPoints(prev => prev + 1);\r\n        SetselectedAnswer('');\r\n        setTimeout(myFunction, 500);\r\n      }\r\n      else {\r\n        SetquizPoints(prev => prev + 0);\r\n        console.log('Wrong Answer');\r\n        SetselectedAnswer('');\r\n        setTimeout(myFunction, 500);\r\n      }\r\n    }\r\n    return (\r\n      <div className='QuizContainer'>\r\n        <div className='Heading'>\r\n          <h1>Tech Quiz</h1>\r\n          <h1>{quizPoints}/10</h1>\r\n        </div>\r\n        <h2 className='Ques'>{`Q${counter+1} ${question.question}`}</h2>\r\n        {\r\n          question.options.map(ob => {\r\n            return (\r\n              <button className='QuesBTN' onClick={(e: any) => {\r\n                e.preventDefault();\r\n                SetselectedAnswer(ob);\r\n              }}>{ob}</button>\r\n            )\r\n          })\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}",{"ruleId":"16","replacedBy":"17"},{"ruleId":"18","replacedBy":"19"},{"ruleId":"20","severity":1,"message":"21","line":48,"column":11,"nodeType":"22","endLine":48,"endColumn":50},{"ruleId":"20","severity":1,"message":"21","line":58,"column":11,"nodeType":"22","endLine":58,"endColumn":51},"no-native-reassign",["23"],"no-negated-in-lhs",["24"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]